AWSTemplateFormatVersion: "2010-09-09"
Description: Trivia
Parameters:
  NotificationsTopicArn:
    Type: String
    Description: ARN of the SNS topic to send notifications too

Resources:
  TriviaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TriviaFunctionExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PublishNotificationToSns
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationsTopicArn

  TriviaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: Trivia
      Handler: index.lambda_handler
      Runtime: python3.10
      Role: !GetAtt TriviaFunctionExecutionRole.Arn
      Environment:
        Variables:
          NOTIFICATION_TOPIC: !Ref NotificationsTopicArn
      Code:
        ZipFile: |
          from dataclasses import dataclass, replace
          from urllib import request
          import json
          import random
          import boto3
          import os


          QUESTIONS_URL = "https://raw.githubusercontent.com/uberspot/OpenTriviaQA/master/categories/science-technology"
          ANSWER_EMOIJIS: list[str] = [ '️A', '️B', 'C', 'D' ]
          CORRECT_MESSAGES = [
              "🎉 Correct!!! Ding ding ding! You nailed it! 🎯",
              "🤯 Correct!!! Whoa! Correct answer.",
              "🚀 Correct!!! Houston, we have a winner!",
              "🕵️ Correct!!!️ Sherlock's got nothing on you!",
              "🧠 Correct!!! Brain power level: 1000. You guessed right!",
              "💡 Correct!!! Light bulb moment! That was spot on!",
              "🍪 Correct!!! You deserve a cookie for that guess!",
              "🎩 Correct!!! Magic or just genius? Either way, you're right!",
              "🏆 Correct!!! Adding one more to your trophy case. Correct guess!",
              "🦉 Correct!!! Wise like an owl, aren't we? Spot on!"
          ]
          INCORRECT_MESSAGES = [
              "🚫 Incorrect... Swing and a miss! Try again?",
              "🎣 Incorrect... You cast your line, but didn't catch the answer this time.",
              "🛸 Incorrect... That answer was out of this world...and not in a good way.",
              "😿 Incorrect... We aimed for the stars, but landed in the backyard.",
          ]


          def download_text_file(url: str) -> str:
              with request.urlopen(url) as response:
                  data = response.read()
                  text = data.decode('latin-1')

              return text


          @dataclass
          class Question:
              text: str
              answers: list[str]
              correct_answer_index: int

              def generate_message(self) -> str:
                  message = self.text + '\n'

                  for idx, answer in enumerate(self.answers):
                      icon = ANSWER_EMOIJIS[idx]
                      message += '\n' + icon + '. ' + answer

                  return message


          def fetch_questions():
              questions: list[Question] = []
              content = download_text_file(QUESTIONS_URL)

              correct_answer_text = ''
              question = Question('', [], -1)
              reading_question = False

              for line in content.splitlines():
                  if line.startswith('#Q '):
                      question = replace(question, text=line.removeprefix('#Q '))
                      reading_question = True
                  elif line.startswith('^ '):
                      reading_question = False
                      correct_answer_text = line.removeprefix('^ ')
                  elif reading_question:
                      question = replace(
                          question, 
                          text=question.text + '\n' + line
                      )
                  elif line:
                      # it's an answer
                      question = replace(
                          question, 
                          answers = question.answers + [ line[2:] ]
                      )
                  elif question.text:
                      correct_answer_index = question.answers.index(correct_answer_text)

                      question = replace(question, correct_answer_index=correct_answer_index)
                      questions.append(question)
                      question = Question('', [], -1)

              return questions


          questions = fetch_questions()

          def ask_next_question():
              next_question_index = random.randint(0, len(questions) - 1)
              question = questions[next_question_index]

              next_question_message = dict(
                  version='1.0',
                  source='custom',
                  content=dict(
                      title='Trivia Question',
                      description=question.generate_message()
                  ),
                  metadata=dict(
                      additionalContext=dict(
                          Question=next_question_index,
                      )
                  )
              )
              message = json.dumps(next_question_message)

              sns = boto3.client('sns')
              topic_arn = os.environ.get('NOTIFICATION_TOPIC') 

              sns.publish(
                  TopicArn=topic_arn,
                  Message=message
              )

              return next_question_message


          def answer_to_answer_index(value: str) -> int:
              ch = value[0]
              if ch.isupper():
                  return ord(ch) - ord('A')
              elif ch.islower():
                  return ord(ch) - ord('a')
              else:
                  raise Exception(f'Unexpected answer: {value}')


          def submit_answer(event) -> str:
              question_index = int(event['Question'])
              answer = event['Answer']
              answer_index = answer_to_answer_index(answer)
              question = questions[question_index]

              if answer_index == question.correct_answer_index:
                  return random.choice(CORRECT_MESSAGES)
              else:
                  return random.choice(INCORRECT_MESSAGES)



          def lambda_handler(event, context):
              next_question = ask_next_question()

              if 'Answer' in event:
                  return submit_answer(event)
              else:
                  return 'Question sent'

