AWSTemplateFormatVersion: "2010-09-09"
Description: Create a JIRA issue
Parameters:
  JiraHost:
    Type: String
    Description: Where your JIRA API is hosted (typically something.atlassian.net for cloud hosted versions)
  JiraApiUsername:
    Type: String
    Description: The Username to use for the API calls. Typically the email of your JIRA account.
  JiraApiToken:
    Type: String
    Description: API Token. Generate one of these at in JIRA at /manage-profile/security/api-tokens.
    NoEcho: true
  JiraProjectKey:
    Type: String
    Description: Project Key. Look under Manage Projects in JIRA for this.
  JiraIssueTypeName:
    Type: String
    Default: 'Task'
    Description: Name of the type of issue to create. Look under Issue Types to find their names.

Resources:
  JiraApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: JiraApiKey
      Description: JIRA API key used by the CreateJiraIssue lambda function.
      SecretString: !Ref JiraApiToken
  
  CreateJiraIssueFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CreateJiraIssueFunctionExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref JiraApiKeySecret

  CreateJiraIssueFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateJiraIssue
      Handler: index.lambda_handler
      Runtime: python3.10
      Role: !GetAtt CreateJiraIssueFunctionExecutionRole.Arn
      Environment:
        Variables:
          JIRA_HOST: !Ref JiraHost
          JIRA_API_SECRET_NAME: !Ref JiraApiKeySecret
          JIRA_API_USER: !Ref JiraApiUsername
          JIRA_PROJECT_KEY: !Ref JiraProjectKey
          JIRA_ISSUE_TYPE_NAME: !Ref JiraIssueTypeName
      Code:
        ZipFile: |
          import os
          import json
          import urllib.request
          import urllib.error
          import base64
          import boto3

          def retrieve_secret(secret_name):
            client = boto3.client('secretsmanager')
            response = client.get_secret_value(SecretId=secret_name)
            secret_value = response['SecretString']
            return secret_value

          def create_jira_issue(event):
            jira_host = os.environ.get('JIRA_HOST')
            secret_name = os.environ.get('JIRA_API_SECRET_NAME')
            api_username = os.environ.get('JIRA_API_USER')
            project_key = os.environ.get('JIRA_PROJECT_KEY')
            issue_type_name = os.environ.get('JIRA_ISSUE_TYPE_NAME')

            jira_url = f'https://{jira_host}/rest/api/3/issue'

            summary = event.get('summary', '')
            description = event.get('description', '')

            # modify this using the content here
            # https://developer.atlassian.com/server/jira/platform/jira-rest-api-examples/
            issue_payload = {
              'fields': {
                'project': {
                  'key': project_key
                },
                'issuetype': {
                  'name': issue_type_name
                },
                'summary': summary,
                'description': {
                  'type': 'doc',
                  'version': 1,
                  'content': [
                    {
                      'type': 'paragraph',
                      'content': [
                        {
                          'type': 'text',
                          'text': description
                        }
                      ]
                    }
                  ]
                }
              }
            }

            api_token = retrieve_secret(secret_name)

            credentials = base64.b64encode(f'{api_username}:{api_token}'.encode()).decode('utf-8')

            headers = {
              'Content-Type': 'application/json',
              'Authorization': f'Basic {credentials}'
            }

            request = urllib.request.Request(
              jira_url,
              method='POST',
              headers=headers,
              data=json.dumps(issue_payload).encode()
            )

            with urllib.request.urlopen(request) as response:
              if response.status == 201:
                response_data = json.loads(response.read().decode())
                issue_key = response_data['key']

                url = f'https://{jira_host}/browse/{issue_key}'

                return f'Created JIRA ticket <{url}|{issue_key}> ðŸŽ‰'
              else:
                print(response.read().decode())
                raise Error(f'Failed to create issue [{response.status}]')

          def lambda_handler(event, context):
            try:
              result = create_jira_issue(event)
              return {
                'statusCode': 200,
                'body': result
              }
            except ValueError as e:
              return {
                'statusCode': 400,
                'body': str(e)
              }